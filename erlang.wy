;;; erl-parse/erlang.by -- LL grammar for Erlang language specification
;;
;; Copyright (C) 2002, 2003 Vladimir G. Sekissov
;; Copyright (C) 2003 David Ponce
;;
;; Author: Vladimir G. Sekissov <svg@surnet.ru>
;;         David Ponce <david@dponce.com>
;;
;; This is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.
;;

%{
  (defconst erlang-number-expression
    (concat "\\("
          "\\([0-9]+\\.[0-9]+\\([eE][+-]?[0-9]+\\)?\\)" ;; float
          "\\|"
          "\\(\\([0123]?[0-9]#\\)?[0-9]+\\)" ;; integer
          "\\|"
          "\\(\\$\\\\?.\\)" ;; char
          "\\)")
    "Regexp describing an Erlang number expression")
%}

%package erlang-wy
%provide erlang-wy

%use-macros erl-parse-macros CALL-TAG

%start         literal
%languagemode  erlang-mode

;; Punctuation
%type <punctuation>
%token <punctuation> ASTERISK          "*"
%token <punctuation> BANG              "!"
%token <punctuation> COLON             ":"
%token <punctuation> COMMA             ","
%token <punctuation> CONCATENATE       "++"
%token <punctuation> EQUAL             "=="
%token <punctuation> EXACTLY_EQUAL     "=:="
%token <punctuation> GREATER           ">"
%token <punctuation> GREATER_OR_EQUAL  ">="
%token <punctuation> HASH              "#"
%token <punctuation> LBIN              "<<"
%token <punctuation> LESS              "<"
%token <punctuation> LESS_OR_EQUAL     "=<"
%token <punctuation> LIST_COMP         "||"
%token <punctuation> MATCH             "="
%token <punctuation> MINUS             "-"
%token <punctuation> NOT_EQUAL         "/="
%token <punctuation> NOT_EXACTLY_EQUAL "=/="
%token <punctuation> PERIOD            "."
%token <punctuation> PLUS              "+"
%token <punctuation> RARROW            "->"
%token <punctuation> RBIN              ">>"
%token <punctuation> SEMICOLON         ";"
%token <punctuation> SLASH             "/"
%token <punctuation> SUBTRACT          "--"
%token <punctuation> VERT_BAR          "|"
%token <punctuation> WHY               "?"

;; Blocks & Parenthesis
%type  <block>
%token <block>       PAREN_BLOCK "(LPAREN RPAREN)"
%token <block>       BRACE_BLOCK "(LBRACE RBRACE)"
%token <block>       BRACK_BLOCK "(LBRACK RBRACK)"
%token <open-paren>  LPAREN      "("
%token <close-paren> RPAREN      ")"
%token <open-paren>  LBRACE      "{"
%token <close-paren> RBRACE      "}"
%token <open-paren>  LBRACK      "["
%token <close-paren> RBRACK      "]"

;; Keywords
%type <keyword>
%keyword AFTER   "after"
%keyword AND     "and"
%keyword ANDALSO "andalso"
%keyword BAND    "band"
%keyword BEGIN   "begin"
%keyword BNOT    "bnot"
%keyword BOR     "bor"
%keyword BSL     "bsl"
%keyword BSR     "bsr"
%keyword BXOR    "bxor"
%keyword CASE    "case"
%keyword CATCH   "catch"
%keyword DIV     "div"
%keyword ELSE    "else"
%keyword END     "end"
%keyword FUN     "fun"
%keyword IF      "if"
%keyword NOT     "not"
%keyword OF      "of"
%keyword OR      "or"
%keyword ORELSE  "orelse"
%keyword QUERY   "query"
%keyword RECEIVE "receive"
%keyword REM     "rem"
%keyword TRY     "try"
%keyword WHEN    "when"
%keyword XOR     "xor"

;; Basic literal types
%type <symbol> syntax "[a-zA-Z_][a-zA-Z_@0-9]*\\'"
%token <symbol> VAR    "\\`[A-Z_].*"
%token <symbol> ATOM   "\\`[a-z].*"

%type <number> syntax erlang-number-expression
%token <number> NUMBER ".*"

%type <quoted-atom> syntax "'.*" matchdatatype sexp
%token <quoted-atom> ATOM

%type <string>
%token <string> STRING

%%

literal
  : ATOM
  ;