;;; erl-parse/erlang.by -- LL grammar for Erlang language specification
;;
;; Copyright (C) 2013, Thomas Järvstrand
;;
;; Author: Thomas Järvstrand <tjarvstrand@gmail.com>
;;
;; This is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.
;;

%{
  (defconst erlang-int-expression
    (concat "\\("
            "\\(\\([0123]?[0-9]#\\)?[0-9]+\\)" ;; integer
            "\\|"
            "\\(\\$\\\\?.\\)" ;; char
            "\\)")
    "Regexp describing an Erlang integer expression")

  (defconst erlang-float-expression
    "\\([0-9]+\\.[0-9]+\\([eE][+-]?[0-9]+\\)?\\)"
    "Regexp describing an Erlang number expression")
%}

%package erlang-wy
%provide erlang-wy

%use-macros erl-parse-macros {CALL-TAG}

%start module
%start attribute-parameters
%start parameter-list
%start function-call

%languagemode  erlang-mode

;; Punctuation
%type <punctuation>
%token <punctuation> ASTERISK          "*"
%token <punctuation> BANG              "!"
%token <punctuation> COLON             ":"
%token <punctuation> COMMA             ","
%token <punctuation> CONCATENATE       "++"
%token <punctuation> EQUAL             "=="
%token <punctuation> EXACTLY_EQUAL     "=:="
%token <punctuation> GREATER           ">"
%token <punctuation> GREATER_OR_EQUAL  ">="
%token <punctuation> HASH              "#"
%token <punctuation> LBIN              "<<"
%token <punctuation> LESS              "<"
%token <punctuation> LESS_OR_EQUAL     "=<"
%token <punctuation> LIST_COMP         "||"
%token <punctuation> MATCH             "="
%token <punctuation> MINUS             "-"
%token <punctuation> NOT_EQUAL         "/="
%token <punctuation> NOT_EXACTLY_EQUAL "=/="
%token <punctuation> PERIOD            "."
%token <punctuation> PLUS              "+"
%token <punctuation> RARROW            "->"
%token <punctuation> RBIN              ">>"
%token <punctuation> SEMICOLON         ";"
%token <punctuation> SLASH             "/"
%token <punctuation> SUBTRACT          "--"
%token <punctuation> VERT_BAR          "|"
%token <punctuation> WHY               "?"

;; Blocks & Parenthesis
%type  <block>
%token <block>       PAREN_BLOCK "(LPAREN RPAREN)"
%token <block>       BRACE_BLOCK "(LBRACE RBRACE)"
%token <block>       BRACK_BLOCK "(LBRACK RBRACK)"
%token <open-paren>  LPAREN      "("
%token <close-paren> RPAREN      ")"
%token <open-paren>  LBRACE      "{"
%token <close-paren> RBRACE      "}"
%token <open-paren>  LBRACK      "["
%token <close-paren> RBRACK      "]"

;; Keywords
%type <keyword>
%keyword AFTER   "after"
%keyword AND     "and"
%keyword ANDALSO "andalso"
%keyword BAND    "band"
%keyword BEGIN   "begin"
%keyword BNOT    "bnot"
%keyword BOR     "bor"
%keyword BSL     "bsl"
%keyword BSR     "bsr"
%keyword BXOR    "bxor"
%keyword CASE    "case"
%keyword CATCH   "catch"
%keyword DIV     "div"
%keyword END     "end"
%keyword FUN     "fun"
%keyword IF      "if"
%keyword NOT     "not"
%keyword OF      "of"
%keyword OR      "or"
%keyword ORELSE  "orelse"
;; Not used
;; %keyword QUERY   "query"
%keyword RECEIVE "receive"
%keyword REM     "rem"
%keyword TRY     "try"
%keyword WHEN    "when"
%keyword XOR     "xor"

;; Basic literal types
%type <symbol> syntax "[a-zA-Z_][a-zA-Z_@0-9]*"
%token <symbol> VAR    "\\`[A-Z_].*"
%token <symbol> ATOM   "\\`[a-z].*"

%type <int> syntax erlang-int-expression
%token <int> INT ".*"

%type <float> syntax erlang-float-expression
%token <float> FLOAT ".*"


%type <quoted-atom> syntax "'.*" matchdatatype sexp
%token <quoted-atom> ATOM

%type <string>
%token <string> STRING

%%

module
  : attribute
  ;


attribute
  : MINUS ATOM attribute-parameters PERIOD
    (TAG $2 'attribute :parameters $3)
  ;

attribute-parameters
  : non-parenthesized-expression
    (list (TAG $1 'parameter))
  | PAREN_BLOCK
    (EXPANDFULL $1 parameter-list)
  ;

expression-list
  : expression optional-expression-list
  ;

optional-expression-list
  : COMMA expression optional-expression-list
  | ;; Empty
  ;

non-parenthesized-expression
  : non-parenthesized-unary-expression
  | non-parenthesized-unary-expression infix-operator expression
  ;

non-parenthesized-unary-expression
  : BRACE_BLOCK
  | BRACK_BLOCK
  | unary-expression
  ;

expression
  : unary-expression-or-block
  | unary-expression-or-block infix-operator expression
  ;

unary-expression-or-block
  : unary-expression
  | block
  ;

unary-expression
  : VAR
  | CATCH unary-expression-or-block
  | prefix-operator unary-expression-or-block
  | bit-syntax
  | literal
  | record
  | begin
  | case
  | anonymous-function
  | if
  | receive
  | try
  ;

function-call
  : FUN function-name-component SLASH INT
    (CALL-TAG nil $2 (string-to-number $4) nil)
  | FUN function-name-component COLON function-name-component SLASH INT
    (CALL-TAG $2 $4 (string-to-number $4) t)
  | function-name-component PAREN_BLOCK
    (CALL-TAG nil $1 (length (EXPANDFULL $2 parameter-list)) nil)
  | function-name-component COLON function-name-component PAREN_BLOCK
    (CALL-TAG $1 $3 (length (EXPANDFULL $4 parameter-list)) t)
  ;

function-name-component
  : ATOM
  | VAR
  | PAREN_BLOCK
    (progn "?")
  ;

parameter-list
  : LPAREN
    ()
  | RPAREN
    ()
  | expression COMMA
    (TAG $1 'parameter)
  | expression RPAREN
    (TAG $1 'parameter)
  ;

block
  : PAREN_BLOCK
  | BRACE_BLOCK
  | BRACK_BLOCK
  ;

record
  : HASH ATOM BRACK_BLOCK
  ;

bit-syntax
  : LBIN bit-syntax-elements RBIN
  ;

bit-syntax-elements
  : bit-syntax-element optional-bit-syntax-elements
  ;

optional-bit-syntax-elements
  : COMMA bit-syntax-element optional-bit-syntax-elements
  | ;; Empty
  ;

bit-syntax-element
  : bit-syntax-value optional-bit-syntax-size optional-bit-syntax-type-spec
  ;

optional-bit-syntax-size
  : COLON VAR
  | COLON INT
  | COLON PAREN_BLOCK
  | ;; Empty
  ;

optional-bit-syntax-type-spec
  : SLASH bit-syntax-type optional-bit-syntax-type
  | ;; Empty
  ;

optional-bit-syntax-type
  : MINUS bit-syntax-type optional-bit-syntax-type
  | ;; Empty
  ;

bit-syntax-type
  : ATOM
  | ATOM COLON INT
  ;

bit-syntax-value
  : VAR
  | STRING
  | number
  | PAREN_BLOCK
  ;

literal
  : ATOM
  | STRING
  | number
  ;

number
  : INT
  | FLOAT
  ;

begin
  : BEGIN expression-list END
  ;

case
  : CASE expression OF match-clauses END
  ;

anonymous-function
  : FUN PAREN_BLOCK optional-guard RARROW expression-list END
  | FUN VAR PAREN_BLOCK optional-guard RARROW expression-list END
  ;

if
  : IF match-clauses END
  ;

receive
 ;; Having multiple after-clauses makes no sense but doesn't seem to be a
 ;; syntax error. Perhaps issue a worning?
  : RECEIVE match-clauses AFTER match-clauses END
  | RECEIVE match-clauses END
  ;

try
  : TRY expression-list CATCH catch-clauses END
  | TRY expression OF match-clauses CATCH catch-clauses END
  ;

catch-clauses
  : catch-clause optional-catch-clauses
  ;

catch-clause
  : ATOM COLON match-clause
  | match-clause
  ;

optional-catch-clauses
  : SEMICOLON catch-clause optional-catch-clauses
  | ;; Empty
  ;

match-clauses
  : match-clause optional-match-clauses
  ;

optional-match-clauses
  : SEMICOLON match-clause optional-match-clauses
  | ;; Empty
  ;

match-clause
  : expression optional-guard RARROW expression-list
  ;

optional-guard
  : WHEN expression optional-guard-expressions
  | ;; Empty
  ;

optional-guard-expressions
  : COMMA expression optional-guard-expressions
  | SEMICOLON expression optional-guard-expressions
  | ;; Empty
  ;

infix-operator
  : BANG
  | MATCH
  | arithmetic-operator
  | bitwise-operator
  | boolean-operator
  | comparison-operator
  | list-operator
  ;

prefix-operator
  : BNOT
  | NOT
  | MINUS
  | PLUS
  ;

arithmetic-operator
  : PLUS
  | MINUS
  | ASTERISK
  | SLASH
  | DIV
  | REM
  ;

bitwise-operator
  : BAND
  | BOR
  | BXOR
  | BSL
  | BSR
  ;

boolean-operator
  : AND
  | ANDALSO
  | OR
  | ORELSE
  | XOR
  ;

comparison-operator
  : EQUAL
  | EXACTLY_EQUAL
  | NOT_EQUAL
  | NOT_EXACTLY_EQUAL
  | LESS
  | LESS_OR_EQUAL
  | GREATER
  | GREATER_OR_EQUAL
  ;

list-operator
  : CONCATENATE
  | SUBTRACT
  ;